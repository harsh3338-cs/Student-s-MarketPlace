@model StudentServicesMarketplace.Models.Order
@{
    ViewData["Title"] = "Complete Your Payment";
    var clientSecret = ViewBag.ClientSecret as string;
    var publishableKey = ViewBag.PublishableKey as string;
    var orderId = (int)ViewBag.OrderId;
}

<div class="row justify-content-center">
    <div class="col-md-6">
        <h2>Complete Payment for Order #@Model.Id</h2>
        <p><strong>Service:</strong> @Model.Service.Title</p>
        <p><strong>Amount:</strong> $@Model.PriceAtOrder.ToString("F2")</p>
        <hr />

        <form id="payment-form">
            <div id="payment-element" class="mb-3">
                <!-- Stripe.js injects the Payment Element here -->
            </div>
            <button id="submit" class="btn btn-primary w-100">
                <div class="spinner-border spinner-border-sm d-none" role="status" id="spinner">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <span id="button-text">Pay $@Model.PriceAtOrder.ToString("F2")</span>
            </button>
            <div id="payment-message" class="mt-2 text-danger">
                <!-- Display error messages to your customers here -->
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script src="https://js.stripe.com/v3/"></script>
    <script>
        const stripe = Stripe('@publishableKey');
        const clientSecret = '@clientSecret';
        const orderId = @orderId;

        let elements;

        initialize();
        checkStatus();

        document
            .querySelector("#payment-form")
            .addEventListener("submit", handleSubmit);

        // Fetches a payment intent and captures the client secret
        async function initialize() {
            elements = stripe.elements({ clientSecret });
            const paymentElement = elements.create("payment");
            paymentElement.mount("#payment-element");
        }

        async function handleSubmit(e) {
            e.preventDefault();
            setLoading(true);

            const { error } = await stripe.confirmPayment({
                elements,
                confirmParams: {
                    // Make sure to change this to your payment completion page
                    return_url: `${window.location.origin}/Orders/PaymentSuccess?orderId=${orderId}`,
                },
            });

            // This point will only be reached if there is an immediate error when
            // confirming the payment. Otherwise, your customer will be redirected to
            // your `return_url`. For some payment methods like iDEAL, your customer will
            // be redirected to an intermediate site first to authorize the payment, then
            // redirected to the `return_url`.
            if (error) {
                if (error.type === "card_error" || error.type === "validation_error") {
                    showMessage(error.message);
                } else {
                    showMessage("An unexpected error occurred.");
                }
            }
            setLoading(false);
        }

        // Fetches the status of the payment intent with client_secret
        async function checkStatus() {
            if (!clientSecret) {
                return;
            }
            const { paymentIntent } = await stripe.retrievePaymentIntent(clientSecret);

            switch (paymentIntent.status) {
                case "succeeded":
                    showMessage("Payment succeeded!");
                    // Optionally redirect or update UI here if needed, though return_url handles primary flow
                    break;
                case "processing":
                    showMessage("Your payment is processing.");
                    break;
                case "requires_payment_method":
                    showMessage("Your payment was not successful, please try again.");
                    break;
                default:
                    showMessage("Something went wrong.");
                    break;
            }
        }

        // ------- UI helpers -------
        function showMessage(messageText) {
            const messageContainer = document.querySelector("#payment-message");
            messageContainer.textContent = messageText;
        }

        function setLoading(isLoading) {
            if (isLoading) {
                document.querySelector("#submit").disabled = true;
                document.querySelector("#spinner").classList.remove("d-none");
                document.querySelector("#button-text").classList.add("d-none");
            } else {
                document.querySelector("#submit").disabled = false;
                document.querySelector("#spinner").classList.add("d-none");
                document.querySelector("#button-text").classList.remove("d-none");
            }
        }
    </script>
}