@model StudentServicesMarketplace.Models.Service
@using StudentServicesMarketplace.Models // For Enums if needed
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Http.Extensions // For GetEncodedUrl or similar if needed, though Path + QueryString is fine
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = Model.Title + " - Service Details";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var currentUserId = UserManager.GetUserId(User);
    bool isOwner = (User.Identity.IsAuthenticated && Model.StudentId == currentUserId);
    bool providerReadyForPayment = ViewBag.ProviderReadyForPayment ?? false; // From ServicesController.Details

    decimal platformFeePercentage = 0.10m; // 10%
    decimal price = Model.Price;
    decimal platformFee = Math.Round(price * platformFeePercentage, 2);
    decimal totalAmountClientPays = price; // Total client pays is the service price

    // Construct the returnUrl correctly
    var returnUrl = Context.Request.Path + Context.Request.QueryString;
}

<div class="container mt-4 mb-5">
    <div class="row">
        @* --- Left Column: Service Details --- *@
        <div class="col-lg-8">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Home</a></li>
                    <li class="breadcrumb-item"><a asp-controller="Services" asp-action="Index">Services</a></li>
                    <li class="breadcrumb-item active" aria-current="page">@Model.Title</li>
                </ol>
            </nav>

            <h1 class="mb-3">@Model.Title</h1>

            @if (!string.IsNullOrEmpty(Model.ImageUrl))
            {
                <img src="@Model.ImageUrl" alt="@Model.Title" class="img-fluid rounded mb-4 shadow-sm" style="max-height: 450px; width:100%; object-fit: cover;" />
            }
            else
            {
                <img src="https://via.placeholder.com/800x450.png?text=Service+Image" alt="Default Service Image" class="img-fluid rounded mb-4 shadow-sm" />
            }

            <h4>Service Description</h4>
            <p class="lead">@Html.Raw(Model.Description?.Replace(Environment.NewLine, "<br />"))</p> @* Render newlines as <br> *@
            <hr />
            <dl class="row">
                <dt class="col-sm-3">Category:</dt>
                <dd class="col-sm-9">@Model.Category</dd>

                <dt class="col-sm-3">Provider:</dt>
                <dd class="col-sm-9">@Model.Student.FirstName @Model.Student.LastName</dd>

                <dt class="col-sm-3">Posted On:</dt>
                <dd class="col-sm-9">@Model.DatePosted.ToLocalTime().ToString("MMMM dd, yyyy")</dd>

                <dt class="col-sm-3">Status:</dt>
                <dd class="col-sm-9">
                    @if (Model.IsActive)
                    {
                        <span class="badge bg-success">Active</span>
                    }
                    else
                    {
                        <span class="badge bg-secondary">Inactive</span>
                    }
                </dd>
            </dl>
        </div>

        @* --- Right Column: Pricing, Actions, Chat Placeholder --- *@
        <div class="col-lg-4">
            <div class="card shadow-sm sticky-top" style="top: 20px;">
                <div class="card-header bg-light">
                    <h4 class="mb-0 text-center">Service Price</h4>
                </div>
                <div class="card-body">
                    <div class="text-center mb-3">
                        <span class="display-5 fw-bold text-primary">$@price.ToString("F2")</span>
                    </div>

                    <h5>Payment Breakdown (for client reference)</h5>
                    <ul class="list-group list-group-flush mb-3">
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            Service Base Price
                            <span>$@((price - platformFee).ToString("F2"))</span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            Platform Fee (@(platformFeePercentage * 100)%)
                            <span>$@platformFee.ToString("F2")</span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center fw-bold border-top pt-2">
                            You Pay
                            <span>$@totalAmountClientPays.ToString("F2")</span>
                        </li>
                    </ul>

                    @if (isOwner)
                    {
                        <p class="alert alert-info small">This is your service listing. You can manage it below.</p>
                        <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning w-100 mb-2"><i class="fas fa-edit"></i> Edit Service</a>
                        if (!providerReadyForPayment)
                        {
                            <div class="alert alert-danger small p-2">
                                <i class="fas fa-exclamation-triangle"></i> Your payment setup is incomplete. Clients cannot order this service.
                                <a asp-controller="StripeOnboarding" asp-action="Onboard" class="fw-bold d-block mt-1">Complete Setup Now</a>.
                            </div>
                        }
                    }
                    else if (User.Identity.IsAuthenticated && User.IsInRole("Client"))
                    {
                        if (Model.IsActive)
                        {
                            if (providerReadyForPayment)
                            {
                                <a asp-controller="Orders" asp-action="Create" asp-route-serviceId="@Model.Id" class="btn btn-success btn-lg w-100 mb-2">
                                    <i class="fas fa-shopping-cart"></i> Order This Service
                                </a>
                            }
                            else
                            {
                                <button class="btn btn-secondary btn-lg w-100 mb-2" disabled data-bs-toggle="tooltip" data-bs-placement="top" title="The service provider needs to complete their payment setup.">
                                    Provider Not Ready
                                </button>
                                <p class="small text-muted text-center">This service cannot be ordered at this time.</p>
                            }
                        }
                        else
                        {
                            <p class="alert alert-secondary text-center small">This service is currently not active.</p>
                        }
                    }
                    else if (User.Identity.IsAuthenticated) // Logged in but not a client
                    {
                        <p class="alert alert-secondary">Please log in as a Client to order services.</p>
                    }
                    else // Not logged in
                    {
                        <a asp-area="Identity" asp-page="/Account/Login" asp-route-returnUrl="@returnUrl" class="btn btn-primary btn-lg w-100 mb-2">
                            Login to Order
                        </a>
                        <p class="text-center small mt-2">
                            New here? <a asp-area="Identity" asp-page="/Account/Register" asp-route-returnUrl="@returnUrl">Sign Up</a>
                        </p>
                    }

                    @* --- Chat Button Placeholder --- *@
                    @if (User.Identity.IsAuthenticated && !isOwner && Model.IsActive) // Show chat button if logged in, not owner, and service is active
                    {
                        <hr class="my-3">
                        <button type="button" class="btn btn-outline-primary w-100" id="initiateChatBtn" data-provider-id="@Model.StudentId" data-provider-name="@Model.Student.FirstName">
                            <i class="fas fa-comments"></i> Chat with @Model.Student.FirstName
                        </button>
                        <div id="chat-interface-placeholder" class="mt-2" style="display:none; border:1px solid #ccc; padding:10px; height: 300px; overflow-y: auto; background-color: #f9f9f9;">
                            <div class="text-center p-5">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading chat...</span>
                                </div>
                                <p class="mt-2 text-muted">Loading chat with @Model.Student.FirstName...</p>
                            </div>
                            @* Actual chat messages and input field would go here via JavaScript & SignalR *@
                        </div>
                    }
                </div>
                @if (Model.IsActive)
                {
                    <div class="card-footer text-center text-muted small">
                        All transactions are secure. Service provided by @Model.Student.FirstName.
                    </div>
                }
                else
                {
                    <div class="card-footer text-center text-danger small">
                        This service is currently INACTIVE.
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
@* Ensure Font Awesome is linked in your _Layout.cshtml if you use these icons *@
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize Bootstrap tooltips (for disabled button)
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            })


            const chatButton = document.getElementById('initiateChatBtn');
            const chatPlaceholder = document.getElementById('chat-interface-placeholder');

            if (chatButton) {
                chatButton.addEventListener('click', function () {
                    const providerId = this.dataset.providerId;
                    const providerName = this.dataset.providerName;

                    console.log('Initiate chat with provider ID:', providerId, 'Name:', providerName);
                    // alert('Chat functionality with ' + providerName + ' would be initialized here. This is a placeholder.');

                    if (chatPlaceholder) {
                        const isChatVisible = chatPlaceholder.style.display === 'block';
                        chatPlaceholder.style.display = isChatVisible ? 'none' : 'block';
                        if (!isChatVisible) {
                            // Simulate loading chat content - replace with actual SignalR/AJAX
                            chatPlaceholder.innerHTML = `<p class="text-center p-3">Chat with <strong>${providerName}</strong></p><div class="messages-area" style="height: 200px; overflow-y: auto; border-bottom: 1px solid #eee; margin-bottom:10px;"></div><textarea class="form-control" rows="2" placeholder="Type your message..."></textarea><button class="btn btn-sm btn-primary mt-2">Send</button>`;
                        }
                    }
                });
            }
        });
    </script>
}